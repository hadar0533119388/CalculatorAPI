/*
 * Calculator API
 *
 * REST API for performing arithmetic operations using JWT
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Calculator.Attributes;
using Microsoft.AspNetCore.Authorization;
using Calculator.Models;
using Calculator.Utils;
using Calculator.Services;
using Microsoft.Extensions.Logging;
using Castle.Core.Logging;

namespace Calculator.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AuthenticationApiController : ControllerBase
    {
        private readonly JwtTokenGenerator jwtTokenGenerator;
        private readonly ILogger<AuthenticationApiController> logger;

        /// <summary>
        /// Constructor of AuthenticationApiController
        /// </summary>
        /// <param name="jwtTokenGenerator">The jwtTokenGenerator service instance.</param>
        public AuthenticationApiController(JwtTokenGenerator jwtTokenGenerator, ILogger<AuthenticationApiController> logger)
        {
            this.jwtTokenGenerator = jwtTokenGenerator;
            this.logger = logger;
        }
        /// <summary>
        /// Generates a JWT token
        /// </summary>
        /// <param name="loginRequest">Login credentials</param>
        /// <response code="200">JWT token created</response>
        /// <response code="401">Unauthorized - invalid credentials</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/auth/token")]
        [ValidateModelState]
        [SwaggerOperation("GenerateToken")]
        public IActionResult GenerateToken(LoginRequest loginRequest)
        {
            try
            {
                if (string.IsNullOrEmpty(loginRequest?.UserName) || string.IsNullOrEmpty(loginRequest?.Password))
                {
                    return BadRequest("Username and password are required");
                }

                
                if (!Global.Users.TryGetValue(loginRequest.UserName, out var password) ||
                    password != loginRequest.Password)
                {
                    return Unauthorized("Invalid username or password");
                }

                string token = jwtTokenGenerator.GenerateToken(loginRequest.UserName);

                logger.LogInformation($"Generated token for userName: {loginRequest.UserName}");

                return Ok(new { token });
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error to generating token");
                return StatusCode(500, $"An error occurred while generating the token: {ex}");
            }
        }
    }
}
